<application>
  <component name="AppStorage">
    <histories>
      <item value="get Longitude" />
      <item value="get Latitude" />
      <item value="generate Waybill Location" />
      <item value="vehicle" />
      <item value="already Has Vehicle" />
      <item value="renewed" />
      <item value="CONFIGURATION" />
      <item value="DEBIAN FRONTEND" />
      <item value="prerequisites" />
      <item value="REFRESHED AT" />
      <item value="Kafka Consume Test" />
      <item value="Profiling Aspect" />
      <item value="specified" />
      <item value="execute" />
      <item value="执行" />
      <item value="请求网络" />
      <item value="prop" />
      <item value="durability" />
      <item value="priority" />
      <item value="with Identity" />
      <item value="pause Job" />
      <item value="associated" />
      <item value="If the related job does not have any other triggers , and the job is not durable , then the job will also be deleted ." />
      <item value="Remove the indicated" />
      <item value="pause Trigger" />
      <item value="unschedule Job" />
      <item value="Keys are composed of both a name and group , and the name must be unique within the group . If only a group is specified then the default group name will be used" />
      <item value="future Date" />
      <item value="beans can look up collaborating beans via the factory ( Dependency Lookup ). Note that most beans will choose to receive references to collaborating beans via corresponding bean properties or constructor arguments ( Dependency Injection )." />
      <item value="Integration code for other frameworks can leverage this interface to wire and populate existing bean instances that Spring does not control the lifecycle of . This is particularly useful for Web Work Actions and Tapestry Page objects , for example ." />
      <item value="Extension of the {@ link org . springframework . beans . factory . Bean Factory } interface to be implemented by bean factories that are capable of autowiring , provided that they want to expose this functionality for existing bean instances . &lt; p &gt; This subinterface of Bean Factory is not meant to be used in normal application code : stick to {@ link org . springframework . beans . factory . Bean Factory } or {@ link org . springframework . beans . factory . Listable Bean Factory } for typical use cases . &lt; p &gt; Integration code for other frameworks can leverage this interface to wire and populate existing bean instances that Spring does not control the lifecycle of . This is particularly useful for Web Work Actions and Tapestry Page objects , for example . &lt; p &gt; Note that this interface is not implemented by {@ link org . springframework . context . Application Context } facades , as it is hardly ever used by application code . That said , it is available from an application context too , accessible through Application Context ' s {@ link org . springframework . context . Application Context # get Autowire Capable Bean Factory ()} method . &lt; p &gt; You may also implement the {@ link org . springframework . beans . factory . Bean Factory Aware } interface , which exposes the internal Bean Factory even when running in an Application Context , to get access to an Autowire Capable Bean Factory : simply cast the passed - in Bean Factory to Autowire Capable Bean Factory ." />
      <item value="Extension" />
      <item value="Rejected" />
      <item value="trigger" />
      <item value="Reschedule" />
      <item value="Resume" />
      <item value="resumejob" />
      <item value="using Job Data" />
      <item value="store Durably" />
      <item value="job Should Recover" />
      <item value="trigger Group" />
      <item value="manual" />
      <item value="fork" />
      <item value="provided" />
      <item value="vehicle Tonnage" />
      <item value="milliseconds" />
      <item value="period" />
      <item value="interval" />
      <item value="休眠时间" />
      <item value="Consignment Date Time" />
    </histories>
  </component>
</application>